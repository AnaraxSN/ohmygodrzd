from datetime import datetime, date
from typing import Optional, List, Dict
import re


def validate_date(date_string: str) -> Optional[date]:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
    """
    try:
        return datetime.strptime(date_string, '%d.%m.%Y').date()
    except ValueError:
        return None


def validate_train_number(train_number: str) -> bool:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –ø–æ–µ–∑–¥–∞
    """
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã –∏ –±—É–∫–≤—ã
    pattern = r'^[0-9]{3}[–ê-–Ø]{1}$'
    return bool(re.match(pattern, train_number.upper()))


def format_station_name(station_code: str, station_name: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    return f"{station_name} ({station_code})"


def format_price(price: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    digits = re.findall(r'\d+', price)
    if digits:
        return f"{digits[0]}‚ÇΩ"
    return "0‚ÇΩ"


def format_time(time_string: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    if not time_string:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú
    time_match = re.search(r'\d{1,2}:\d{2}', time_string)
    if time_match:
        return time_match.group()
    
    return time_string


def get_seat_type_emoji(seat_type: str) -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
    """
    emoji_map = {
        '–ø–ª–∞—Ü–∫–∞—Ä—Ç': 'üí∫',
        '–∫—É–ø–µ': 'üö™',
        '—Å–≤': 'üõè',
        '—Å–∏–¥—è—á–∏–µ': 'ü™ë',
        '–ª—é–∫—Å': 'üëë',
        '–ª—é–±–æ–π': 'üîç'
    }
    
    return emoji_map.get(seat_type.lower(), 'üí∫')


def truncate_text(text: str, max_length: int = 50) -> str:
    """
    –û–±—Ä–µ–∑–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
    """
    if len(text) <= max_length:
        return text
    
    return text[:max_length-3] + "..."


def parse_station_code(station_input: str) -> str:
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–¥–∞ —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ï—Å–ª–∏ –≤–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥ –≤ —Å–∫–æ–±–∫–∞—Ö, –∏–∑–≤–ª–µ–∫–∞–µ–º –µ–≥–æ
    code_match = re.search(r'\(([^)]+)\)', station_input)
    if code_match:
        return code_match.group(1).upper()
    
    # –ï—Å–ª–∏ –≤–≤–æ–¥ –ø–æ—Ö–æ–∂ –Ω–∞ –∫–æ–¥ (3-4 —Å–∏–º–≤–æ–ª–∞), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if len(station_input) <= 4 and station_input.isupper():
        return station_input
    
    # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å –≤–≤–æ–¥
    return station_input


def is_valid_station_code(code: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞ —Å—Ç–∞–Ω—Ü–∏–∏
    """
    # –ö–æ–¥ —Å—Ç–∞–Ω—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 3-4 —Å–∏–º–≤–æ–ª–∞, –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
    pattern = r'^[–ê-–Ø0-9]{3,4}$'
    return bool(re.match(pattern, code.upper()))


def format_subscription_summary(subscription_data: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    """
    summary = f"üöÇ {subscription_data['departure_station_name']} ‚Üí {subscription_data['arrival_station_name']}\n"
    summary += f"üìÖ {subscription_data['departure_date'].strftime('%d.%m.%Y')}\n"
    
    if subscription_data.get('train_number'):
        summary += f"üöÜ –ü–æ–µ–∑–¥: {subscription_data['train_number']}\n"
    
    if subscription_data.get('seat_type'):
        emoji = get_seat_type_emoji(subscription_data['seat_type'])
        summary += f"{emoji} –¢–∏–ø –º–µ—Å—Ç–∞: {subscription_data['seat_type']}\n"
    
    return summary.strip()


def get_time_range_emoji(time_range: str) -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    """
    emoji_map = {
        '—É—Ç—Ä–æ': 'üåÖ',
        '–¥–µ–Ω—å': '‚òÄÔ∏è',
        '–≤–µ—á–µ—Ä': 'üåÜ',
        '–Ω–æ—á—å': 'üåô',
        '–ª—é–±–æ–µ': '‚è∞'
    }
    
    return emoji_map.get(time_range.lower(), '‚è∞')


def calculate_next_check_time(check_frequency_minutes: int) -> datetime:
    """
    –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    return datetime.now() + timedelta(minutes=check_frequency_minutes)


def format_duration(start_time: str, end_time: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–µ–∑–¥–∫–∏
    """
    try:
        start = datetime.strptime(start_time, '%H:%M')
        end = datetime.strptime(end_time, '%H:%M')
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∑–Ω–∞—á–∏—Ç –ø–æ–µ–∑–¥–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        if end < start:
            end = end.replace(day=end.day + 1)
        
        duration = end - start
        hours = duration.total_seconds() // 3600
        minutes = (duration.total_seconds() % 3600) // 60
        
        if hours > 0:
            return f"{int(hours)}—á {int(minutes)}–º"
        else:
            return f"{int(minutes)}–º"
            
    except ValueError:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


def sanitize_input(text: str) -> str:
    """
    –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    """
    # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = re.sub(r'<[^>]+>', '', text)
    text = re.sub(r'[^\w\s\-\.\(\)]', '', text)
    return text.strip()


def format_notification_time() -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    now = datetime.now()
    return now.strftime('%d.%m.%Y %H:%M')


def is_working_hours() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–∞—Ö
    """
    now = datetime.now()
    return 8 <= now.hour <= 22


def get_subscription_status_emoji(is_active: bool, last_checked: Optional[datetime]) -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    """
    if not is_active:
        return "‚ùå"
    
    if not last_checked:
        return "‚è≥"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    time_since_check = datetime.now() - last_checked
    
    if time_since_check.total_seconds() < 300:  # –ú–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç
        return "üü¢"
    elif time_since_check.total_seconds() < 1800:  # –ú–µ–Ω–µ–µ 30 –º–∏–Ω—É—Ç
        return "üü°"
    else:
        return "üî¥"

