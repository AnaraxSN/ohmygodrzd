import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode
from sqlalchemy.orm import Session
from datetime import datetime, date, timedelta
from typing import Dict, List
import json

from src.config import settings
from src.database import get_db, engine
from src.models import User, Subscription, Station, FoundTicket
from src.scraper import RZDScraper
from src.monitoring import MonitoringService
from src.utils import get_seat_type_emoji, format_subscription_summary
from loguru import logger


class RZDBot:
    def __init__(self):
        self.application = Application.builder().token(settings.telegram_bot_token).build()
        self.scraper = RZDScraper()
        self.monitoring = MonitoringService()
        self.user_states = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.setup_handlers()
    
    def create_main_keyboard(self) -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        keyboard = [
            [KeyboardButton("üöÇ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"), KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")],
            [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton("üìä –°—Ç–∞—Ç—É—Å")],
            [KeyboardButton("‚ùì –ü–æ–º–æ—â—å"), KeyboardButton("üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    def create_cancel_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_operation")]]
        return InlineKeyboardMarkup(keyboard)
    
    def create_seat_type_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞"""
        keyboard = [
            [
                InlineKeyboardButton(f"{get_seat_type_emoji('–ø–ª–∞—Ü–∫–∞—Ä—Ç')} –ü–ª–∞—Ü–∫–∞—Ä—Ç", callback_data="seat_–ø–ª–∞—Ü–∫–∞—Ä—Ç"),
                InlineKeyboardButton(f"{get_seat_type_emoji('–∫—É–ø–µ')} –ö—É–ø–µ", callback_data="seat_–∫—É–ø–µ")
            ],
            [
                InlineKeyboardButton(f"{get_seat_type_emoji('—Å–≤')} –°–í", callback_data="seat_—Å–≤"),
                InlineKeyboardButton(f"{get_seat_type_emoji('—Å–∏–¥—è—á–∏–µ')} –°–∏–¥—è—á–∏–µ", callback_data="seat_—Å–∏–¥—è—á–∏–µ")
            ],
            [
                InlineKeyboardButton(f"{get_seat_type_emoji('–ª—é–∫—Å')} –õ—é–∫—Å", callback_data="seat_–ª—é–∫—Å"),
                InlineKeyboardButton(f"{get_seat_type_emoji('–ª—é–±–æ–π')} –õ—é–±–æ–π", callback_data="seat_–ª—é–±–æ–π")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def create_time_range_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
        keyboard = [
            [InlineKeyboardButton("üåÖ –£—Ç—Ä–æ (06:00-12:00)", callback_data="time_—É—Ç—Ä–æ")],
            [InlineKeyboardButton("‚òÄÔ∏è –î–µ–Ω—å (12:00-18:00)", callback_data="time_–¥–µ–Ω—å")],
            [InlineKeyboardButton("üåÜ –í–µ—á–µ—Ä (18:00-24:00)", callback_data="time_–≤–µ—á–µ—Ä")],
            [InlineKeyboardButton("üåô –ù–æ—á—å (00:00-06:00)", callback_data="time_–Ω–æ—á—å")],
            [InlineKeyboardButton("‚è∞ –õ—é–±–æ–µ –≤—Ä–µ–º—è", callback_data="time_–ª—é–±–æ–µ")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def create_frequency_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        keyboard = [
            [InlineKeyboardButton("‚ö° 5 –º–∏–Ω—É—Ç", callback_data="freq_5")],
            [InlineKeyboardButton("üîÑ 10 –º–∏–Ω—É—Ç", callback_data="freq_10")],
            [InlineKeyboardButton("‚è±Ô∏è 15 –º–∏–Ω—É—Ç", callback_data="freq_15")],
            [InlineKeyboardButton("‚è∞ 30 –º–∏–Ω—É—Ç", callback_data="freq_30")],
            [InlineKeyboardButton("üïê 60 –º–∏–Ω—É—Ç", callback_data="freq_60")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def create_subscription_actions_keyboard(self, subscription_id: int) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π"""
        keyboard = [
            [
                InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_sub_{subscription_id}"),
                InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data=f"pause_sub_{subscription_id}")
            ],
            [
                InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_sub_{subscription_id}"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stats_sub_{subscription_id}")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def create_confirmation_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, —Å–æ–∑–¥–∞—Ç—å", callback_data="confirm_yes"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")
            ],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="confirm_edit")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("subscriptions", self.subscriptions_command))
        self.application.add_handler(CommandHandler("add_subscription", self.add_subscription_command))
        self.application.add_handler(CommandHandler("settings", self.settings_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("cancel", self.cancel_command))
        
        # Callback queries
        self.application.add_handler(CallbackQueryHandler(self.handle_callback_query))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await self.register_user(user)
        
        welcome_text = f"""
üöÇ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∏–ª–µ—Ç–æ–≤ –†–ñ–î!</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –ø–æ–µ–∑–¥–∞ –†–ñ–î –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—Ç–∞.

üéØ <b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –±–∏–ª–µ—Ç—ã –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
‚Ä¢ üîî –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ üì± –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞

üìã <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:</b>
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        main_keyboard = self.create_main_keyboard()
        
        await update.message.reply_text(
            welcome_text, 
            reply_markup=main_keyboard,
            parse_mode=ParseMode.HTML
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        help_text = """
üí° <b>–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:</b>
1. –ù–∞–∂–º–∏—Ç–µ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
2. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
3. –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏
4. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Å—Ç–∞
5. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∏–ª–µ—Ç–∞—Ö!

‚ùì –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–∞–∂–º–∏—Ç–µ "‚ùì –ü–æ–º–æ—â—å"
        """
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.HTML)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìñ –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

üîç –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_subscription
2. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
3. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
4. –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏
5. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
6. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Å—Ç–∞
7. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏

üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:
‚Ä¢ /subscriptions - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
‚Ä¢ /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ (5-60 –º–∏–Ω—É—Ç)
‚Ä¢ –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã (—Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã)

üé´ –¢–∏–ø—ã –º–µ—Å—Ç:
‚Ä¢ –ü–ª–∞—Ü–∫–∞—Ä—Ç - –Ω–µ–¥–æ—Ä–æ–≥–∏–µ –º–µ—Å—Ç–∞ –≤ –æ–±—â–µ–º –≤–∞–≥–æ–Ω–µ
‚Ä¢ –ö—É–ø–µ - –º–µ—Å—Ç–∞ –≤ –∫—É–ø–µ –Ω–∞ 4 —á–µ–ª–æ–≤–µ–∫–∞
‚Ä¢ –°–í - —Å–ø–∞–ª—å–Ω—ã–π –≤–∞–≥–æ–Ω (–ª—é–∫—Å)
‚Ä¢ –°–∏–¥—è—á–∏–µ - –º–µ—Å—Ç–∞ –≤ —Å–∏–¥—è—á–µ–º –≤–∞–≥–æ–Ω–µ
‚Ä¢ –õ—é–∫—Å - –º–µ—Å—Ç–∞ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ—Å—Ç–∏

‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        """
        
        await update.message.reply_text(help_text)
    
    async def subscriptions_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscriptions"""
        user_id = update.effective_user.id
        
        with Session(engine) as db:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return
            
            subscriptions = db.query(Subscription).filter(
                Subscription.user_id == user.id,
                Subscription.is_active == True
            ).all()
            
            if not subscriptions:
                text = """
üìã <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫</b>

üöÇ –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∏–ª–µ—Ç–æ–≤!

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.
                """
                keyboard = [
                    [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="add_subscription")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
                return
            
            text = f"üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ ({len(subscriptions)}):</b>\n\n"
            
            for i, sub in enumerate(subscriptions, 1):
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π
                departure_station = db.query(Station).filter(Station.code == sub.departure_station).first()
                arrival_station = db.query(Station).filter(Station.code == sub.arrival_station).first()
                
                departure_name = departure_station.name if departure_station else sub.departure_station
                arrival_name = arrival_station.name if arrival_station else sub.arrival_station
                
                text += f"<b>{i}. üöÇ {departure_name} ‚Üí {arrival_name}</b>\n"
                text += f"üìÖ <b>–î–∞—Ç–∞:</b> {sub.departure_date.strftime('%d.%m.%Y')}\n"
                if sub.train_number:
                    text += f"üöÜ <b>–ü–æ–µ–∑–¥:</b> {sub.train_number}\n"
                if sub.seat_type:
                    emoji = get_seat_type_emoji(sub.seat_type)
                    text += f"{emoji} <b>–¢–∏–ø –º–µ—Å—Ç–∞:</b> {sub.seat_type}\n"
                text += f"‚è∞ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞:</b> –∫–∞–∂–¥—ã–µ {sub.check_frequency} –º–∏–Ω\n"
                text += f"üìä <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b> {sub.last_checked.strftime('%d.%m.%Y %H:%M') if sub.last_checked else '–ù–∏–∫–æ–≥–¥–∞'}\n\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            keyboard = []
            for sub in subscriptions:
                keyboard.append([
                    InlineKeyboardButton(f"‚úèÔ∏è #{sub.id}", callback_data=f"edit_sub_{sub.id}"),
                    InlineKeyboardButton(f"‚è∏Ô∏è #{sub.id}", callback_data=f"pause_sub_{sub.id}"),
                    InlineKeyboardButton(f"üóë #{sub.id}", callback_data=f"delete_sub_{sub.id}")
                ])
            
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="add_subscription")])
            keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    
    async def add_subscription_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_subscription"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–æ–∫
        with Session(engine) as db:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return
            
            active_subs = db.query(Subscription).filter(
                Subscription.user_id == user.id,
                Subscription.is_active == True
            ).count()
            
            if active_subs >= settings.max_subscriptions_per_user:
                text = f"""
‚ùå <b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–æ–∫</b>

–£ –≤–∞—Å —É–∂–µ {active_subs} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ {settings.max_subscriptions_per_user} –≤–æ–∑–º–æ–∂–Ω—ã—Ö.

üóë –£–¥–∞–ª–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π.
                """
                keyboard = [
                    [InlineKeyboardButton("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="subscriptions")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
                return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states[user_id] = {
            'step': 'departure_station',
            'data': {}
        }
        
        text = """
üöÇ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏</b>

üéØ <b>–®–∞–≥ 1/7: –°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –µ—ë –∫–æ–¥.
–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –ú–°–ö, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –°–ü–ë

üí° <b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞.
        """
        
        keyboard = self.create_cancel_keyboard()
        await update.message.reply_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    
    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
        user_id = update.effective_user.id
        
        with Session(engine) as db:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            active_subscriptions = db.query(Subscription).filter(
                Subscription.user_id == user.id,
                Subscription.is_active == True
            ).count()
            
            user_tickets = db.query(FoundTicket).join(Subscription).filter(
                Subscription.user_id == user.id
            ).count()
            
            text = f"""
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>

üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –í–∫–ª—é—á–µ–Ω—ã
‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {settings.check_interval_minutes} –º–∏–Ω—É—Ç
‚Ä¢ –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: 08:00 - 22:00

üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_subscriptions}
‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –±–∏–ª–µ—Ç–æ–≤: {user_tickets}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.created_at.strftime('%d.%m.%Y')}

üéØ <b>–õ–∏–º–∏—Ç—ã:</b>
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –ø–æ–¥–ø–∏—Å–æ–∫: {settings.max_subscriptions_per_user}
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É: {settings.max_concurrent_requests}
            """
            
            keyboard = [
                [InlineKeyboardButton("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notification_settings")],
                [InlineKeyboardButton("‚è∞ –ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏", callback_data="frequency_settings")],
                [InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    
    async def show_main_menu(self, query):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        text = """
üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:
        """
        
        keyboard = self.create_main_keyboard()
        await query.edit_message_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        text = """
üìä –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
üü¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω
üü¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞
üü¢ –ü–∞—Ä—Å–µ—Ä –†–ñ–î —Ä–∞–±–æ—Ç–∞–µ—Ç

üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: 0
‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –±–∏–ª–µ—Ç–æ–≤: 0
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: 0

‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
        """
        
        await update.message.reply_text(text)
    
    async def cancel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
        user_id = update.effective_user.id
        
        if user_id in self.user_states:
            del self.user_states[user_id]
        
        await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback queries"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user_id = update.effective_user.id
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if data == "add_subscription":
            await self.add_subscription_command(update, context)
        elif data == "subscriptions":
            await self.subscriptions_command(update, context)
        elif data == "settings":
            await self.settings_command(update, context)
        elif data == "cancel_operation":
            await self.cancel_command(update, context)
        elif data == "main_menu":
            await self.show_main_menu(query)
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
        elif data.startswith("seat_"):
            seat_type = data.split("_", 1)[1]
            if user_id in self.user_states:
                self.user_states[user_id]['data']['seat_type'] = seat_type
                self.user_states[user_id]['step'] = 'time_range'
                await self.handle_time_range_selection(query, seat_type)
        
        # –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
        elif data.startswith("time_"):
            time_range = data.split("_", 1)[1]
            if user_id in self.user_states:
                self.user_states[user_id]['data']['time_range'] = time_range
                self.user_states[user_id]['step'] = 'frequency'
                await self.handle_frequency_selection(query, time_range)
        
        # –í—ã–±–æ—Ä —á–∞—Å—Ç–æ—Ç—ã
        elif data.startswith("freq_"):
            frequency = int(data.split("_", 1)[1])
            if user_id in self.user_states:
                self.user_states[user_id]['data']['frequency'] = frequency
                self.user_states[user_id]['step'] = 'confirm'
                await self.handle_final_confirmation(query)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        elif data == "confirm_yes":
            await self.create_subscription_from_state(query)
        elif data == "confirm_no":
            await self.cancel_command(update, context)
        elif data == "confirm_edit":
            await self.edit_subscription_parameters(query)
        
        # –î–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        elif data.startswith("edit_sub_"):
            sub_id = int(data.split("_")[2])
            await self.edit_subscription(query, sub_id)
        elif data.startswith("delete_sub_"):
            sub_id = int(data.split("_")[2])
            await self.delete_subscription(query, sub_id)
        elif data.startswith("pause_sub_"):
            sub_id = int(data.split("_")[2])
            await self.pause_subscription(query, sub_id)
        elif data.startswith("stats_sub_"):
            sub_id = int(data.split("_")[2])
            await self.show_subscription_stats(query, sub_id)
        
        # –í—ã–±–æ—Ä —Å—Ç–∞–Ω—Ü–∏–π
        elif data.startswith("select_departure_"):
            station_code = data.split("_", 2)[2]
            await self.select_departure_station(query, station_code)
        elif data.startswith("select_arrival_"):
            station_code = data.split("_", 2)[2]
            await self.select_arrival_station(query, station_code)
        
        # –ü—Ä–æ–ø—É—Å–∫ –Ω–æ–º–µ—Ä–∞ –ø–æ–µ–∑–¥–∞
        elif data == "skip_train_number":
            if user_id in self.user_states:
                self.user_states[user_id]['data']['train_number'] = None
                self.user_states[user_id]['step'] = 'seat_type'
                await self.handle_seat_type_selection(query)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        elif data == "notification_settings":
            await self.show_notification_settings(query)
        elif data == "frequency_settings":
            await self.show_frequency_settings(query)
        elif data == "detailed_stats":
            await self.show_detailed_statistics(query)
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        text = update.message.text
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        if text == "üöÇ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏":
            await self.subscriptions_command(update, context)
            return
        elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
            await self.add_subscription_command(update, context)
            return
        elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            await self.settings_command(update, context)
            return
        elif text == "üìä –°—Ç–∞—Ç—É—Å":
            await self.status_command(update, context)
            return
        elif text == "‚ùì –ü–æ–º–æ—â—å":
            await self.help_command(update, context)
            return
        elif text == "üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await self.statistics_command(update, context)
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        if user_id not in self.user_states:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.",
                reply_markup=self.create_main_keyboard()
            )
            return
        
        state = self.user_states[user_id]
        step = state['step']
        
        if step == 'departure_station':
            await self.handle_departure_station(update, text, state)
        elif step == 'arrival_station':
            await self.handle_arrival_station(update, text, state)
        elif step == 'departure_date':
            await self.handle_departure_date(update, text, state)
        elif step == 'train_number':
            await self.handle_train_number(update, text, state)
        elif step == 'seat_type':
            await self.handle_seat_type(update, text, state)
        elif step == 'confirm':
            await self.handle_confirmation(update, text, state)
    
    async def handle_departure_station(self, update: Update, text: str, state: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        # –ü–æ–∏—Å–∫ —Å—Ç–∞–Ω—Ü–∏–π
        stations = self.scraper.get_stations(text)
        
        if not stations:
            await update.message.reply_text(
                "‚ùå –°—Ç–∞–Ω—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∫–æ–¥ —Å—Ç–∞–Ω—Ü–∏–∏."
            )
            return
        
        if len(stations) == 1:
            state['data']['departure_station'] = stations[0]['code']
            state['data']['departure_station_name'] = stations[0]['name']
            state['step'] = 'arrival_station'
            
            text = f"""
‚úÖ –°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {stations[0]['name']}

–®–∞–≥ 2/6: –°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ –µ—ë –∫–æ–¥.
–ù–∞–ø—Ä–∏–º–µ—Ä: –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫, –í–õ–î, –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, –ù–°–ö
            """
            await update.message.reply_text(text)
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π
            keyboard = []
            for station in stations[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                keyboard.append([
                    InlineKeyboardButton(
                        f"{station['name']} ({station['code']})",
                        callback_data=f"select_departure_{station['code']}"
                    )
                ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "üîç –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞–Ω—Ü–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é:",
                reply_markup=reply_markup
            )
    
    async def handle_arrival_station(self, update: Update, text: str, state: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
        stations = self.scraper.get_stations(text)
        
        if not stations:
            await update.message.reply_text(
                "‚ùå –°—Ç–∞–Ω—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∫–æ–¥ —Å—Ç–∞–Ω—Ü–∏–∏."
            )
            return
        
        if len(stations) == 1:
            state['data']['arrival_station'] = stations[0]['code']
            state['data']['arrival_station_name'] = stations[0]['name']
            state['step'] = 'departure_date'
            
            text = f"""
‚úÖ –°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {stations[0]['name']}

–®–∞–≥ 3/6: –î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏

–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.2024

üí° –°–æ–≤–µ—Ç: –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ —Ä–∞–Ω—å—à–µ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è.
            """
            await update.message.reply_text(text)
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π
            keyboard = []
            for station in stations[:5]:
                keyboard.append([
                    InlineKeyboardButton(
                        f"{station['name']} ({station['code']})",
                        callback_data=f"select_arrival_{station['code']}"
                    )
                ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "üîç –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞–Ω—Ü–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é:",
                reply_markup=reply_markup
            )
    
    async def handle_departure_date(self, update: Update, text: str, state: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –ø–æ–µ–∑–¥–∫–∏"""
        try:
            departure_date = datetime.strptime(text, '%d.%m.%Y').date()
            
            if departure_date < date.today():
                await update.message.reply_text(
                    "‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É."
                )
                return
            
            state['data']['departure_date'] = departure_date
            state['step'] = 'train_number'
            
            text = f"""
‚úÖ –î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏: {departure_date.strftime('%d.%m.%Y')}

–®–∞–≥ 4/6: –ù–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–µ–∑–¥–æ–≤.
–ù–∞–ø—Ä–∏–º–µ—Ä: 001–ú, 002–ú, 003–ú

üí° –°–æ–≤–µ—Ç: –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.
            """
            
            keyboard = [[InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_train_number")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(text, reply_markup=reply_markup)
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.2024)"
            )
    
    async def handle_train_number(self, update: Update, text: str, state: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–∞ –ø–æ–µ–∑–¥–∞"""
        state['data']['train_number'] = text.strip()
        state['step'] = 'seat_type'
        
        text = f"""
‚úÖ –ù–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞: {text}

–®–∞–≥ 5/6: –¢–∏–ø –º–µ—Å—Ç–∞

–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ç–∏–ø –º–µ—Å—Ç–∞:
        """
        
        keyboard = [
            [InlineKeyboardButton("üí∫ –ü–ª–∞—Ü–∫–∞—Ä—Ç", callback_data="seat_–ø–ª–∞—Ü–∫–∞—Ä—Ç")],
            [InlineKeyboardButton("üö™ –ö—É–ø–µ", callback_data="seat_–∫—É–ø–µ")],
            [InlineKeyboardButton("üõè –°–í (–°–ø–∞–ª—å–Ω—ã–π –≤–∞–≥–æ–Ω)", callback_data="seat_—Å–≤")],
            [InlineKeyboardButton("ü™ë –°–∏–¥—è—á–∏–µ –º–µ—Å—Ç–∞", callback_data="seat_—Å–∏–¥—è—á–∏–µ")],
            [InlineKeyboardButton("üëë –õ—é–∫—Å", callback_data="seat_–ª—é–∫—Å")],
            [InlineKeyboardButton("üîç –õ—é–±–æ–π —Ç–∏–ø", callback_data="seat_–ª—é–±–æ–π")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(text, reply_markup=reply_markup)
    
    async def handle_seat_type_selection(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏"""
        text = """
üéØ <b>–®–∞–≥ 5/7: –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–µ–∑–¥–∫–∏</b>

–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
        """
        
        keyboard = self.create_time_range_keyboard()
        await query.edit_message_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    
    async def handle_time_range_selection(self, query, seat_type: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
        text = f"""
‚úÖ <b>–¢–∏–ø –º–µ—Å—Ç–∞:</b> {seat_type}

üéØ <b>–®–∞–≥ 6/7: –ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏</b>

–ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–ª–∏—á–∏–µ –±–∏–ª–µ—Ç–æ–≤?
        """
        
        keyboard = self.create_frequency_keyboard()
        await query.edit_message_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    
    async def handle_frequency_selection(self, query, time_range: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã"""
        text = f"""
‚úÖ <b>–í—Ä–µ–º—è:</b> {time_range}

üéØ <b>–®–∞–≥ 7/7: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</b>

–ü—Ä–æ–≤–µ—Ä—è—Ç—å –±–∏–ª–µ—Ç—ã –∫–∞–∂–¥—ã–µ {query.data.split('_')[1]} –º–∏–Ω—É—Ç.

–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Å —ç—Ç–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏?
        """
        
        keyboard = self.create_confirmation_keyboard()
        await query.edit_message_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    
    async def handle_final_confirmation(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        user_id = query.from_user.id
        if user_id not in self.user_states:
            return
        
        data = self.user_states[user_id]['data']
        
        summary = f"""
üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>

üöÇ <b>–ú–∞—Ä—à—Ä—É—Ç:</b> {data['departure_station_name']} ‚Üí {data['arrival_station_name']}
üìÖ <b>–î–∞—Ç–∞:</b> {data['departure_date'].strftime('%d.%m.%Y')}
üöÜ <b>–ü–æ–µ–∑–¥:</b> {data.get('train_number', '–õ—é–±–æ–π')}
üí∫ <b>–¢–∏–ø –º–µ—Å—Ç–∞:</b> {data['seat_type']}
‚è∞ <b>–í—Ä–µ–º—è:</b> {data.get('time_range', '–õ—é–±–æ–µ')}
üîÑ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞:</b> –∫–∞–∂–¥—ã–µ {data.get('frequency', 10)} –º–∏–Ω—É—Ç

–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?
        """
        
        keyboard = self.create_confirmation_keyboard()
        await query.edit_message_text(summary, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    
    async def create_subscription_from_state(self, query):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        user_id = query.from_user.id
        if user_id not in self.user_states:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        try:
            data = self.user_states[user_id]['data']
            
            with Session(engine) as db:
                user = db.query(User).filter(User.telegram_id == user_id).first()
                if not user:
                    await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                subscription = Subscription(
                    user_id=user.id,
                    departure_station=data['departure_station'],
                    arrival_station=data['arrival_station'],
                    departure_date=data['departure_date'],
                    train_number=data.get('train_number'),
                    seat_type=data['seat_type'],
                    departure_time_range=data.get('time_range'),
                    check_frequency=data.get('frequency', 10)
                )
                
                db.add(subscription)
                db.commit()
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                del self.user_states[user_id]
                
                success_text = f"""
‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>

üöÇ <b>–ú–∞—Ä—à—Ä—É—Ç:</b> {data['departure_station_name']} ‚Üí {data['arrival_station_name']}
üìÖ <b>–î–∞—Ç–∞:</b> {data['departure_date'].strftime('%d.%m.%Y')}
üîÑ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞:</b> –∫–∞–∂–¥—ã–µ {data.get('frequency', 10)} –º–∏–Ω—É—Ç

üîî –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –±–∏–ª–µ—Ç–æ–≤!

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏.
                """
                
                keyboard = self.create_main_keyboard()
                await query.edit_message_text(success_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def select_departure_station(self, query, station_code: str):
        """–í—ã–±–æ—Ä —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        user_id = query.from_user.id
        if user_id not in self.user_states:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–Ω—Ü–∏–∏
        with Session(engine) as db:
            station = db.query(Station).filter(Station.code == station_code).first()
            if station:
                self.user_states[user_id]['data']['departure_station'] = station_code
                self.user_states[user_id]['data']['departure_station_name'] = station.name
                self.user_states[user_id]['step'] = 'arrival_station'
                
                text = f"""
‚úÖ <b>–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b> {station.name}

üéØ <b>–®–∞–≥ 2/7: –°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</b>

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ –µ—ë –∫–æ–¥.
–ù–∞–ø—Ä–∏–º–µ—Ä: –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫, –í–õ–î, –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, –ù–°–ö
                """
                
                keyboard = self.create_cancel_keyboard()
                await query.edit_message_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    
    async def select_arrival_station(self, query, station_code: str):
        """–í—ã–±–æ—Ä —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
        user_id = query.from_user.id
        if user_id not in self.user_states:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–Ω—Ü–∏–∏
        with Session(engine) as db:
            station = db.query(Station).filter(Station.code == station_code).first()
            if station:
                self.user_states[user_id]['data']['arrival_station'] = station_code
                self.user_states[user_id]['data']['arrival_station_name'] = station.name
                self.user_states[user_id]['step'] = 'departure_date'
                
                text = f"""
‚úÖ <b>–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:</b> {station.name}

üéØ <b>–®–∞–≥ 3/7: –î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏</b>

–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.2024

üí° –°–æ–≤–µ—Ç: –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ —Ä–∞–Ω—å—à–µ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è.
                """
                
                keyboard = self.create_cancel_keyboard()
                await query.edit_message_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    
    async def statistics_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        user_id = update.effective_user.id
        
        with Session(engine) as db:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_subscriptions = db.query(Subscription).filter(Subscription.user_id == user.id).count()
            active_subscriptions = db.query(Subscription).filter(
                Subscription.user_id == user.id,
                Subscription.is_active == True
            ).count()
            
            user_tickets = db.query(FoundTicket).join(Subscription).filter(
                Subscription.user_id == user.id
            ).count()
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_subscriptions = db.query(Subscription).filter(Subscription.is_active == True).count()
            total_tickets = db.query(FoundTicket).count()
            
            stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>

üë§ <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫: {user_subscriptions}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_subscriptions}
‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –±–∏–ª–µ—Ç–æ–≤: {user_tickets}

üåê <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {total_subscriptions}
‚Ä¢ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –±–∏–ª–µ—Ç–æ–≤: {total_tickets}

üìà <b>–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ!</b>
            """
            
            await update.message.reply_text(stats_text, parse_mode=ParseMode.HTML)
    
    async def show_notification_settings(self, query):
        """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        text = """
üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>

üì± <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚úÖ –í–∫–ª—é—á–µ–Ω—ã
‚Ä¢ –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: 08:00 - 22:00
‚Ä¢ –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: –í—Å–µ –±–∏–ª–µ—Ç—ã

‚öôÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤—Å–µ/—Ç–æ–ª—å–∫–æ –¥–µ—à–µ–≤—ã–µ)
‚Ä¢ –ü–∞—É–∑–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        """
        
        keyboard = [
            [InlineKeyboardButton("‚è∞ –†–∞–±–æ—á–∏–µ —á–∞—Å—ã", callback_data="working_hours")],
            [InlineKeyboardButton("üí∞ –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notification_types")],
            [InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", callback_data="pause_monitoring")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    
    async def show_frequency_settings(self, query):
        """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Å—Ç–æ—Ç—ã"""
        text = f"""
‚è∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏</b>

üîÑ <b>–¢–µ–∫—É—â–∞—è —á–∞—Å—Ç–æ—Ç–∞:</b> {settings.check_interval_minutes} –º–∏–Ω—É—Ç

üìä <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ 5 –º–∏–Ω—É—Ç - –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
‚Ä¢ 10 –º–∏–Ω—É—Ç - –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
‚Ä¢ 15-30 –º–∏–Ω—É—Ç - –¥–ª—è —Ä–µ–¥–∫–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
‚Ä¢ 60 –º–∏–Ω—É—Ç - –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ß–∞—Å—Ç–æ—Ç–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä –†–ñ–î
        """
        
        keyboard = [
            [InlineKeyboardButton("‚ö° 5 –º–∏–Ω—É—Ç", callback_data="set_freq_5")],
            [InlineKeyboardButton("üîÑ 10 –º–∏–Ω—É—Ç", callback_data="set_freq_10")],
            [InlineKeyboardButton("‚è±Ô∏è 15 –º–∏–Ω—É—Ç", callback_data="set_freq_15")],
            [InlineKeyboardButton("‚è∞ 30 –º–∏–Ω—É—Ç", callback_data="set_freq_30")],
            [InlineKeyboardButton("üïê 60 –º–∏–Ω—É—Ç", callback_data="set_freq_60")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    
    async def show_detailed_statistics(self, query):
        """–ü–æ–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        user_id = query.from_user.id
        
        with Session(engine) as db:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            subscriptions = db.query(Subscription).filter(Subscription.user_id == user.id).all()
            active_subscriptions = [s for s in subscriptions if s.is_active]
            
            total_tickets = db.query(FoundTicket).join(Subscription).filter(
                Subscription.user_id == user.id
            ).count()
            
            recent_tickets = db.query(FoundTicket).join(Subscription).filter(
                Subscription.user_id == user.id,
                FoundTicket.found_at >= datetime.now() - timedelta(days=7)
            ).count()
            
            text = f"""
üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üë§ <b>–í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫: {len(subscriptions)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {len(active_subscriptions)}
‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –±–∏–ª–µ—Ç–æ–≤: {total_tickets}
‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –∑–∞ –Ω–µ–¥–µ–ª—é: {recent_tickets}

üìà <b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º:</b>
            """
            
            for sub in active_subscriptions[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                departure_station = db.query(Station).filter(Station.code == sub.departure_station).first()
                arrival_station = db.query(Station).filter(Station.code == sub.arrival_station).first()
                
                departure_name = departure_station.name if departure_station else sub.departure_station
                arrival_name = arrival_station.name if arrival_station else sub.arrival_station
                
                sub_tickets = db.query(FoundTicket).filter(FoundTicket.subscription_id == sub.id).count()
                
                text += f"‚Ä¢ #{sub.id}: {departure_name} ‚Üí {arrival_name} ({sub_tickets} –±–∏–ª–µ—Ç–æ–≤)\n"
            
            if len(active_subscriptions) > 5:
                text += f"... –∏ –µ—â–µ {len(active_subscriptions) - 5} –ø–æ–¥–ø–∏—Å–æ–∫\n"
            
            keyboard = [
                [InlineKeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    
    async def handle_confirmation(self, update: Update, text: str, state: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ callback query
        pass
    
    async def register_user(self, user):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        with Session(engine) as db:
            existing_user = db.query(User).filter(User.telegram_id == user.id).first()
            
            if not existing_user:
                new_user = User(
                    telegram_id=user.id,
                    username=user.username,
                    first_name=user.first_name,
                    last_name=user.last_name
                )
                db.add(new_user)
                db.commit()
                logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id}")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(self.monitoring.start_monitoring())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await self.application.run_polling()


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = RZDBot()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞
async def main():
    await bot.run()

if __name__ == "__main__":
    asyncio.run(main())
