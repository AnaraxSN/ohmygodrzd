import asyncio
from datetime import datetime, timedelta
from sqlalchemy.orm import Session
from typing import List, Dict
from loguru import logger

from src.config import settings
from src.database import engine
from src.models import Subscription, FoundTicket, User
from src.scraper import RZDScraper
from telegram import Bot
from telegram.error import TelegramError


class MonitoringService:
    def __init__(self):
        self.scraper = RZDScraper()
        self.bot = Bot(token=settings.telegram_bot_token)
        self.is_running = False
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_running = True
        logger.info("–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω")
        
        while self.is_running:
            try:
                await self.check_all_subscriptions()
                await asyncio.sleep(settings.check_interval_minutes * 60)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
    
    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_running = False
        logger.info("–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def check_all_subscriptions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
        with Session(engine) as db:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
            subscriptions = db.query(Subscription).filter(
                Subscription.is_active == True
            ).all()
            
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {len(subscriptions)} –ø–æ–¥–ø–∏—Å–æ–∫")
            
            for subscription in subscriptions:
                try:
                    await self.check_subscription(subscription, db)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.id}: {e}")
                    continue
    
    async def check_subscription(self, subscription: Subscription, db: Session):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —ç—Ç—É –ø–æ–¥–ø–∏—Å–∫—É —Å–µ–π—á–∞—Å
            if subscription.last_checked:
                time_since_last_check = datetime.now() - subscription.last_checked
                if time_since_last_check.total_seconds() < subscription.check_frequency * 60:
                    return  # –ï—â–µ —Ä–∞–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å
            
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.id}: {subscription.departure_station} -> {subscription.arrival_station}")
            
            # –ò—â–µ–º –±–∏–ª–µ—Ç—ã
            trains = self.scraper.search_tickets(
                departure_station=subscription.departure_station,
                arrival_station=subscription.arrival_station,
                departure_date=subscription.departure_date,
                train_number=subscription.train_number
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            subscription.last_checked = datetime.now()
            db.commit()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–µ–∑–¥–∞
            for train in trains:
                await self.process_found_train(train, subscription, db)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.id}: {e}")
    
    async def process_found_train(self, train: Dict, subscription: Subscription, db: Session):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–µ–∑–¥–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–µ–∑–¥ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–¥–ø–∏—Å–∫–∏
            if not self.train_matches_subscription(train, subscription):
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—Ç–∞ –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞
            available_seats = train.get('available_seats', {})
            if not self.has_matching_seats(available_seats, subscription.seat_type):
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–≤–µ–¥–æ–º–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ –æ–± —ç—Ç–æ–º –ø–æ–µ–∑–¥–µ
            existing_ticket = db.query(FoundTicket).filter(
                FoundTicket.subscription_id == subscription.id,
                FoundTicket.train_number == train.get('train_number'),
                FoundTicket.departure_time == train.get('departure_time'),
                FoundTicket.is_notified == True
            ).first()
            
            if existing_ticket:
                return  # –£–∂–µ —É–≤–µ–¥–æ–º–ª—è–ª–∏
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –±–∏–ª–µ—Ç–µ
            found_ticket = FoundTicket(
                subscription_id=subscription.id,
                train_number=train.get('train_number'),
                departure_time=train.get('departure_time'),
                arrival_time=train.get('arrival_time'),
                available_seats=available_seats,
                prices=train.get('prices', {})
            )
            
            db.add(found_ticket)
            db.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.send_notification(subscription, train, found_ticket.id)
            
            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ–µ
            found_ticket.is_notified = True
            db.commit()
            
            logger.info(f"–ù–∞–π–¥–µ–Ω –±–∏–ª–µ—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.id}: {train.get('train_number')}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–µ–∑–¥–∞: {e}")
    
    def train_matches_subscription(self, train: Dict, subscription: Subscription) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–µ–∑–¥–∞ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–¥–ø–∏—Å–∫–∏"""
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ
        if subscription.train_number:
            return train.get('train_number') == subscription.train_number
        
        return True  # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª—é–±–æ–π
    
    def has_matching_seats(self, available_seats: Dict, seat_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–µ—Å—Ç –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        if not seat_type or seat_type == '–ª—é–±–æ–π':
            return len(available_seats) > 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Å—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        for seat_type_name, seat_info in available_seats.items():
            if seat_type.lower() in seat_type_name.lower():
                count = seat_info.get('count', '0')
                if isinstance(count, str):
                    count = ''.join(filter(str.isdigit, count))
                    count = int(count) if count else 0
                return count > 0
        
        return False
    
    async def send_notification(self, subscription: Subscription, train: Dict, ticket_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            user = subscription.user
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self.format_notification_message(subscription, train, ticket_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.bot.send_message(
                chat_id=user.telegram_id,
                text=message,
                parse_mode='HTML'
            )
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
            
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def format_notification_message(self, subscription: Subscription, train: Dict, ticket_id: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        train_number = train.get('train_number', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        departure_time = train.get('departure_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        arrival_time = train.get('arrival_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        available_seats = train.get('available_seats', {})
        prices = train.get('prices', {})
        
        message = f"""
üé´ <b>–ù–ê–ô–î–ï–ù–´ –ë–ò–õ–ï–¢–´!</b>

üöÇ <b>–ü–æ–µ–∑–¥:</b> {train_number}
üìç <b>–ú–∞—Ä—à—Ä—É—Ç:</b> {subscription.departure_station} ‚Üí {subscription.arrival_station}
üìÖ <b>–î–∞—Ç–∞:</b> {subscription.departure_date.strftime('%d.%m.%Y')}
üïê <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {departure_time}
üïê <b>–ü—Ä–∏–±—ã—Ç–∏–µ:</b> {arrival_time}

üí∫ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—Ç–∞:</b>
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        for seat_type, seat_info in available_seats.items():
            count = seat_info.get('count', '0')
            price = seat_info.get('price', '0')
            message += f"‚Ä¢ {seat_type.title()}: {count} –º–µ—Å—Ç –æ—Ç {price}‚ÇΩ\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É (–ø—Ä–∏–º–µ—Ä–Ω–∞—è)
        rzd_url = f"https://pass.rzd.ru/tickets/public/ru?layerName=search&ticketSearch[departureStation]={subscription.departure_station}&ticketSearch[arrivalStation]={subscription.arrival_station}&ticketSearch[departureDate]={subscription.departure_date.strftime('%d.%m.%Y')}"
        
        message += f"""
üîó <a href="{rzd_url}">–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç</a>

üìã –ü–æ–¥–ø–∏—Å–∫–∞: #{subscription.id} ({subscription.departure_station} ‚Üí {subscription.arrival_station})
        """
        
        return message.strip()
    
    async def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        with Session(engine) as db:
            total_subscriptions = db.query(Subscription).filter(Subscription.is_active == True).count()
            total_found_tickets = db.query(FoundTicket).count()
            total_notifications = db.query(FoundTicket).filter(FoundTicket.is_notified == True).count()
            
            return {
                'active_subscriptions': total_subscriptions,
                'found_tickets': total_found_tickets,
                'sent_notifications': total_notifications
            }

